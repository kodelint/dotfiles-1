[core]
	editor = nvim

	# Use custom .gitignore, .gitattributes and hooks
	excludesfile = ~/.config/git/.gitignore_global
	attributesfile = ~/.config/git/.gitattributes
	hooksPath = ~/.config/git/hooks

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	#  See also: <http://apple.stackexchange.com/a/52390/143973>
	trustctime = false
	# speed up?
	# ignoreStat = true

[pager]
	log = diff-highlight | less --tabs=4 -RFX
	show = diff-highlight | less --tabs=4 -RFX
	diff = diff-highlight | less --tabs=4 -RFX

# normal, black, red, green, yellow, blue, magenta, cyan, white
[color]
	ui = auto
	diff = auto
	status = auto
	branch = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]
	added = yellow
	changed = green
	header = bold
	nobranch = bold
	unmerged = reverse
	untracked = cyan
	updated = yellow

[diff]
	# Detect copies as well as renames
	renames = copies
	compactionHeuristic = true
	# submodule = log

[help]
	# Disable correct and execute mistyped commands
	autocorrect = 0

[init]
	templatedir = ~/.config/git/templates

[commit]
	# GPG-signed and Sign off the Developer Certificate of Origin <http://developercertificate.org>
	# See also: <http://gerrit.googlecode.com/svn/documentation/2.0/user-signedoffby.html>
	#           <http://stackoverflow.com/a/1962112/5228839>
	gpgsign = true
	verbose = true

[push]
	# Use the Git 1.x.x default to avoid errors on machines with old Git
	# installations. To use `simple` instead, add this to your `~/.extra` file:
	# `git config --global push.default simple`. See http://git.io/mMah-w.
	# default = matching
	default = current

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[alias]
	# Open a GitHub page in the default browser with git standalone
	see = "!see() { git web--browse http://$(git remote get-url origin | sed 's/git@github.com:/github.com\\//g'); }; see"

	# Always tag with GPG-sign
	tag = tag --sign

	# git reset
	res = reset

	# Git Aliases
	# based by jfrazelle/dotfiles/.gitconfig

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git diff --color --patch-with-stat | diff-highlight | less --tabs=4 -RFX"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"di() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; di"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Color graph log view
	graph = log --graph --color --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%x20(%ce)%n%x20%s%n"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered
	lg = log --color --decorate --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an (%G?)>%Creset' --abbrev-commit
	mdiff = "!f() { git stash | head -1 | grep -q 'No local changes to save'; x=$?; git merge --no-commit $1 &>/dev/null; git add -u &>/dev/null; git diff --staged; git reset --hard &>/dev/null; test $x -ne 0 && git stash pop &>/dev/null; }; f"
	# change = codereview change
	# gofmt = codereview gofmt
	# mail = codereview mail
	# pending = codereview pending
	# submit = codereview submit
	# sync = codereview sync


[http]
 	cookiefile = /Users/zchee/src/github.com/dotfiles/git/.gitcookies
 	sslCAInfo = /usr/local/etc/ssl/certs/ca-bundle.crt

# URL shorthands
[url "git@github.com:"]
	insteadOf = "https://github.com/"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"

[url "sandbox@github.com:"]
	insteadOf = "https://sandbox.github.com/"
	pushInsteadOf = "git://sandbox.github.com/"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
 	insteadOf = "gist:"

[user]
	name = Koichi Shiraishi
	email = zchee.io@gmail.com
	user = zchee.io@gmail.com
	signingkey = 0xA71DFD3B4DA7A79B

[github]
	user = zchee

[gpg]
	program = gpg2

[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f

# ghq
[ghq]
	root = ~/src
