#!/bin/bash
set -e

# Building LLVM on OSX CMake setup script
#
# Required:
#   - clang by Xcode6 or later
#   - cmake
#   - ninja
#
# Usage:
#   build-llvm <LLVM SOURCES ROOT> <CMAKE GENERATORS> <PYTHON VERSION> [DIST_DIR]
#
#   CMake Generators: Unix Makefiles, Ninja, Xcode (Recommend is Ninja)
#
#   Python Version: 2 or 3
#     - for LLDB dylib
#
# Tested version:
#   Apple LLVM version 7.3.0 (clang-703.0.28)
#   Target: x86_64-apple-darwin15.4.0
#
#
# References:
#   - llvm 3.8 currently requires Xcode 7(OS X 10.10 or 10.11) Build the new tsan support in compiler-rt or using
#     - -DLLVM_BUILD_EXTERNAL_COMPILER_RT:BOOL=ON
#     - Ref: https://groups.google.com/forum/m/#!topic/llvm-dev/Uxb1o83qTMI
#
#   - Building with Clan Address Sanitizer(ASan)
#     - https://trac.webkit.org/wiki/ASanWebKit
#
#   - Not build llvm-dsymutil
#     - When LLVM_ENABLE_LTO, link for llvm-dsymutil too slow...
#     - github.com/apple/apple-llvm instead of
#     - Use -DLLVM_TOOL_DSYMUTIL_BUILD:BOOL=OFF
#
#   - Why build static libraries by default
#     - LLVM guys recommend static libraries for common users and shared - for developers.
#     - https://github.com/Homebrew/homebrew-core/issues/3087#issuecomment-233407092
#
#   - libcxx(abi) rpath issue
#     - for libcxx(abi) rpath issue: https://github.com/Homebrew/homebrew-core/issues/3087#issuecomment-234080878

if readlink -f >/dev/null 2>&1; then
  DIRNAME="$(readlink -f .)"
else
  DIRNAME=`perl -e 'use Cwd "abs_path";print abs_path(shift)' .`
fi


# Warning for have not '*build*' in current dir name
if ! [[ $DIRNAME == *build* ]]; then
  echo "Current directory have not *build* name."; exit 1
elif ! $(hash clang); then
  echo "Not found 'clang'."; exit 1
elif ! $(hash cmake); then
  echo "Not found 'cmake'."; exit 1
fi

warn() {
  echo -e "\x1b[7m$1\e[0m"
}


CCACHE=''
if hash ccache && [[ -d /usr/local/opt/ccache/libexec ]]; then
  CCACHE="-DLLVM_CCACHE_BUILD:BOOL=ON \
    -DLLVM_CCACHE_DIR:STRING=$HOME/.ccache \
    -DLLVM_CCACHE_SIZE:STRING=5G"
fi


if hash sysctl && [[ $(uname -s) == 'Darwin' ]]; then
  JOBS=$(($(sysctl -n hw.ncpu) + 1))
elif hash nproc; then
  JOBS=$(($(nproc)+1))
else
  JOBS=9
fi


# define Python Frameworks path
if [[ $3 = "intelpython3" ]]; then
  PYTHON_CONFIG="/opt/intel/$3/bin/python3-config"
  PYTHON_EXECUTABLE="/opt/intel/$3/bin/python3"
elif [[ $3 = "intelpython2" ]]; then
  PYTHON_CONFIG="/opt/intel/$3/bin/python2-config"
  PYTHON_EXECUTABLE="/opt/intel/$3/bin/python2"
elif [[ $3 = "System" ]]; then
  PYTHON_CONFIG='/usr/bin/python-config'
  PYTHON_EXECUTABLE='/usr/bin/python'
else
  if [[ -n "/usr/local/opt/python$3" ]]; then
    PYTHON_CONFIG="/usr/local/bin/python$3-config"
    PYTHON_EXECUTABLE='/usr/local/bin/python'
  fi
fi
PYTHON_INCLUDE_DIR=$(find $("$PYTHON_CONFIG" --prefix)/include -name 'python*' -type d -maxdepth 1)
PYTHON_LIBRARY=$(find $("$PYTHON_CONFIG" --prefix)/lib -name 'libpython*' -maxdepth 1)


# dependencies packages

# Python
if hash "$PYTHON_CONFIG"; then
  PYTHON="\
    -DPYTHON_EXECUTABLE=$PYTHON_EXECUTABLE \
    -DPYTHON_INCLUDE_DIR=$PYTHON_INCLUDE_DIR \
    -DPYTHON_LIBRARY=$PYTHON_LIBRARY"
else
  warn 'Not support Python bindings'
fi

# libxml2
if hash xml2-config; then
  LIBXML2="\
    -DLIBXML2_INCLUDE_DIR="$(xml2-config --prefix)/include/libxml2" \
    -DLIBXML2_LIBRARIES="$(xml2-config --prefix)/lib/libxml2.dylib" \
    -DLIBXML2_XMLLINT_EXECUTABLE="$(xml2-config --prefix)/bin/xmllint""
else
  warn 'Not support libxml2'
fi

# libffi
if pkg-config libffi; then
  LIBFFI="\
    -DFFI_INCLUDE_DIR="$(pkg-config libffi --variable=includedir)" \
    -DFFI_LIBRARY_DIR="$(pkg-config libffi --variable=libdir)""
else
  warn 'Not support libffi'
fi

# ncurses(lldb)
if test -n /usr/local/opt/ncurses || hash ncurses5.4-config; then
  NCURSES_CONFIG="$(which ncurses6-config)" || "$(which ncurses5.4-config)"
  NCURSES_INCLUDE="$($NCURSES_CONFIG --includedir)"
  NCURSES_LIBDIR="$($NCURSES_CONFIG --libdir)"
  NCURSES="\
    -DCURSES_INCLUDE_PATH="$NCURSES_INCLUDE" \
    -DCURSES_CURSES_LIBRARY="$NCURSES_LIBDIR/libcurses.dylib" \
    -DCURSES_FORM_LIBRARY="$NCURSES_LIBDIR/libform.dylib" \
    -DCURSES_NCURSES_LIBRARY="$NCURSES_LIBDIR/libncurses.dylib" \
    -DCURSES_PANEL_LIBRARY="$NCURSES_LIBDIR/libpanel.dylib""
else
  warn 'Not support ncurses'
fi

# hwloc
if [[ -n /usr/local/lib/libhwloc.dylib ]]; then
  USE_HWLOC=ON
else
  USE_HWLOC=OFF
fi

SRC_DIR=$1

# define install directory
if [[ $4 ]]; then
  DST_DIR=$4
else
  DST_DIR=/opt/llvm
fi


# define bindings packages environment variable
ENVIRONMENT_VARIABLE="\
\$SRC_DIR:			$SRC_DIR
    \$DST_DIR:			$DST_DIR

Custom dependency packages:
  $PYTHON
  $LIBXML2
  $LIBFFI
  $NCURSES"

# Usage
usage() {
  USAGE_CMAKE_GENERATORS="\
Unix Makefiles
    Ninja
    Xcode
    CodeBlocks - Ninja
    CodeBlocks - Unix Makefiles
    CodeLite - Ninja
    CodeLite - Unix Makefiles
    Eclipse CDT4 - Ninja
    Eclipse CDT4 - Unix Makefiles
    KDevelop3
    KDevelop3 - Unix Makefiles
    Kate - Ninja
    Kate - Unix Makefiles
    Sublime Text 2 - Ninja
    Sublime Text 2 - Unix Makefiles"
  USAGE_PYTHON_VERSION="\
2
    3
    Sytem"

  echo "error: No build tool as arguments"
  echo ""
  echo "Usage: $0 <LLVM SOURCES ROOT> <CMake Generators> <Python Version> [\$DIST_DIR]"
  echo ""
  echo "CMake Generators"
  echo "    $USAGE_CMAKE_GENERATORS"
  echo ""
  echo "Python Version"
  echo "    $USAGE_PYTHON_VERSION"
  echo ""
  echo "Environment variable:"
  echo "    $ENVIRONMENT_VARIABLE" | sed 's/-D/\n    /g' | sed 's/=/:\t/g'
}

# Check len(args) for usage()
if [[ ! -n $3 ]]; then
  usage
  exit 1
fi


echo "CMake Generators"
echo "    $2"
echo "Python Version"
echo "    $3"
echo "Environment variable:"
echo "    $ENVIRONMENT_VARIABLE" | sed 's/-D/\n    /g' | sed 's/=/:\t/g'
echo ""

command cmake $1 -G "$2" \
  -DBUILD_SHARED_LIBS:BOOL=OFF \
  \
  -DCMAKE_ASM_FLAGS:STRING='-march=native' \
  -DCMAKE_BUILD_TYPE:STRING=Release \
  -DCMAKE_C_FLAGS:STRING='-march=native' \
  -DCMAKE_CXX_FLAGS:STRING='-march=native' \
  -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON \
  -DCMAKE_FIND_FRAMEWORK=LAST \
  -DCMAKE_INSTALL_PREFIX:PATH=$DST_DIR \
  -DCMAKE_MACOSX_RPATH:STRING=0 \
  -DCMAKE_OSX_ARCHITECTURES:STRING=x86_64 \
  -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=10.12 \
  -DCMAKE_OSX_SYSROOT:STRING="$(xcrun --show-sdk-path)" \
  -DCMAKE_SKIP_INSTALL_RPATH:BOOL=NO \
  -DCMAKE_SKIP_RPATH:BOOL=NO \
  \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DCLANG_INCLUDE_DOCS:BOOL=ON \
  -DCLANG_INCLUDE_TESTS:BOOL=ON \
  \
  -DLIBCLANG_BUILD_STATIC:BOOL=ON \
  \
  -DLIBCXXABI_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLIBCXXABI_USE_LLVM_UNWINDER:BOOL=OFF \
  \
  -DLIBCXX_ABI_UNSTABLE:BOOL=ON \
  -DLIBCXX_CONFIGURE_IDE:BOOL=ON \
  -DLIBCXX_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLIBCXX_OVERRIDE_DARWIN_INSTALL:BOOL=ON \
  \
  -DLIBOMP_ARCH:STRING="x86_64" \
  -DLIBOMP_ENABLE_SHARED:BOOL=ON \
  -DLIBOMP_OSX_ARCHITECTURES:STRING="x86_64" \
  -DLIBOMP_USE_HWLOC:BOOL=$USE_HWLOC \
  \
  -DLLDB_EXPORT_ALL_SYMBOLS:BOOL=ON \
  \
  -DLLVM_BUILD_EXTERNAL_COMPILER_RT:BOOL=ON \
  -DLLVM_BUILD_GLOBAL_ISEL:BOOL=ON \
  -DLLVM_BUILD_LLVM_C_DYLIB:BOOL=ON \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_BUILD_TESTS:BOOL=OFF \
  -DLLVM_CREATE_XCODE_TOOLCHAIN:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_ENABLE_CXX1Y:BOOL=ON \
  -DLLVM_ENABLE_EH:BOOL=ON \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_ENABLE_LIBCXX:BOOL=ON \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_SPHINX:BOOL=ON \
  -DLLVM_EXTERNALIZE_DEBUGINFO:BOOL=ON \
  -DLLVM_INCLUDE_DOCS:BOOL=ON \
  -DLLVM_INSTALL_UTILS:BOOL=ON \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_PARALLEL_COMPILE_JOBS:STRING=$JOBS \
  -DLLVM_PARALLEL_LINK_JOBS:STRING=$JOBS \
  -DLLVM_TARGET_ARCH:STRING="host" \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86" \
  -DLLVM_TOOL_DSYMUTIL_BUILD:BOOL=ON \
  -DLLVM_USE_SPLIT_DWARF:BOOL=ON \
  \
  -DLINK_POLLY_INTO_TOOLS:BOOL=ON \
  -DPOLLY_ENABLE_GPGPU_CODEGEN:BOOL=ON \
  -DPOLLY_ENABLE_GPGPU_CODEGEN:BOOL=ON \
  -DWITH_POLLY:BOOL=ON \
  \
  -DLLVM_ENABLE_LTO:STRING=OFF \
  -DLLVM_TOOL_LTO_BUILD:BOOL=ON \
  \
  -DSPHINX_OUTPUT_MAN:BOOL=ON \
  \
  $(echo $CCACHE) \
  \
  $(echo $CURSES) \
  $(echo $LIBFFI) \
  $(echo $LIBXML2) \
  $(echo $PYTHON) \
  \
  -Wno-dev
