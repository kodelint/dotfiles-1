#compdef _go_tool_compile
# zsh completions for '_go_tool_compile'
# automatically generated with http://github.com/RobSis/zsh-completion-generator
local arguments
arguments=(
    '-A[for bootstrapping, allow any type]'
    '-B[disable bounds checking]'
    '-D[set relative path for local imports]'
    '-E[debug symbol export]'
    '-I[add directory to import search path]'
    '-K[debug missing line numbers]'
    '-L[use full (long) path in error messages]'
    '-M[debug move generation]'
    '-N[disable optimizations]'
    '-P[debug peephole optimizer]'
    '-R[debug register optimizer]'
    '-S[print assembly listing]'
    '-V[print compiler version]'
    '-W[debug parse tree after type checking]'
    '-asmhdr[write assembly header to file]'
    '-buildid[record id as the build id in the export metadata]'
    '-complete[compiling complete package (no C or assembly)]'
    '-cpuprofile[write cpu profile to file]'
    '-d[print debug information about items in list]'
    '-dynlink[support references to Go symbols defined in other shared libraries]'
    '-e[no limit on number of errors reported]'
    '-f[debug stack frames]'
    '-g[debug code generation]'
    '-h[halt on error]'
    '-i[debug line number stack]'
    '-importmap[add definition of the form source=actual to import map]'
    '-installsuffix[set pkg directory suffix]'
    '-j[debug runtime-initialized variables]'
    '-l[disable inlining]'
    '-largemodel[generate code that assumes a large memory model]'
    '-live[debug liveness analysis]'
    '-m[print optimization decisions]'
    '-memprofile[write memory profile to file]'
    '-memprofilerate[set runtime.MemProfileRate to rate]'
    '-msan[build code compatible with C/C++ memory sanitizer]'
    '-newexport[use new export format]'
    '-nolocalimports[reject local (relative) imports]'
    '-o[write output to file]'
    '-p[set expected package import path]'
    '-pack[write package file instead of object file]'
    '-r[debug generated wrappers]'
    '-race[enable race detector]'
    '-s[warn about composite literals that can be simplified]'
    '-shared[generate code that can be linked into a shared library]'
    '-trimpath[remove prefix from recorded source file paths]'
    '-u[reject unsafe code]'
    '-v[increase debug verbosity]'
    '-w[debug type checking]'
    '-wb[enable write barrier (default 1)]'
    '-x[debug lexer]'
    '-y[debug declarations in canned imports (with -d)]'
    '*:filename:_files'
)
_arguments -s $arguments
