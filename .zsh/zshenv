# zshenv {{{
# Defines environment variables
#
# for debug and calc startuptime
#  ZSH_DEBUG=1 exec -l zsh
#  ZSH_DEBUG=1 ex # relaunch zsh function

[[ $ZSH_DEBUG = '1' ]] && echo 'Loading zshenv' && zmodload zsh/zprof

# -----------------------------------------------------------------------------
# References {{{
#
# XDG Based Directory environment variables
#   - cf: http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
#   - cf: https://wiki.debian.org/XDGBaseDirectorySpecification
#   - cf: https://wiki.archlinux.org/index.php/XDG_Base_Directory_support
#
# LD_LIBRARY_PATH, typeset
#   - http://d.hatena.ne.jp/yascentur/touch/20111111/1321015289
#
# Ansi color wiki
#   - https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
#
# $PROMPT_EOL_MARK: Removing trailing new line mark
#   - http://stackoverflow.com/questions/18213751/removing-trailing-new-line-after-printing-on-mac-os-x-zsh
#
# $CLICOLOR, $BLOCKSIZE: Set default blocksize for ls, df, du
#   - Ref: http://hints.macworld.com/comment.php?mode=view&cid=24491
#
# $LESS_TEMPCAP:
#   - http://stealthefish.com/development/2014/04/26/Better-bash-man-pages.html
#   - http://unix.stackexchange.com/questions/119/colors-in-man-pages/147#147
#   - http://unix.stackexchange.com/questions/108699/documentation-on-less-termcap-variables/108840#108840
#
# }}}
# -----------------------------------------------------------------------------

# Environment caching
#   - unset in bottom of the .zshrc
# TODO: needs 'local'?

if [[ -d "/Applications/Xcode-beta.app/Contents/Developer" ]]; then
  export XCODE_DIR="/Applications/Xcode-beta.app/Contents/Developer"
elif [[ -d "/Applications/Xcode.app/Contents/Developer" ]]; then
  export XCODE_DIR="/Applications/Xcode.app/Contents/Developer"
fi
MACOS_SDK_DIR=$(xcrun --show-sdk-path)
ZSH_PLUGIN=$HOME/.zsh/plugins
ZSH_MODULE=$HOME/.zsh/modules
DOTFILES=$HOME/src/github.com/zchee/dotfiles

# }}}
# -----------------------------------------------------------------------------
# System {{{

command ulimit -n 10000 ## exec
export ZSH_COLORS=1
# export TIMEFMT=$'\nreal\t%E\nuser\t%U\nsys\t%S' # bash like time output

# }}}
# -----------------------------------------------------------------------------
# Path {{{

# Loading automatically settings XDG Base Directories
: ${XDG_RUNTIME_DIR:=/run/user/501}
: ${XDG_DATA_HOME:=$HOME/.local/share}
: ${XDG_CONFIG_HOME:=$HOME/.config}
: ${XDG_DATA_DIRS:=/usr/local/share:/usr/share}
: ${XDG_CONFIG_DIRS:=/etc/xdg}
: ${XDG_CACHE_HOME:=$HOME/.cache}
: ${XDG_LOG_HOME:=$HOME/.local/var/log}

# }}}
# -----------------------------------------------------------------------------
# Common terminal environment variables {{{

export CACHE=$XDG_CACHE_HOME
export LC_ALL='en_US.UTF-8'
export LANG='en_US.UTF-8'
export SHELL="/usr/local/bin/zsh"
export TERMINFO='/usr/local/share/terminfo'
# export TERMINFO=$HOME/.terminfo
export TERM='xterm-256color'

# Affected in all CUI tools
export EDITOR="nvim"
export MANPAGER='less -R'
export PAGER='less -R'
export VISUAL="nvim"

export CLICOLOR=1
export BLOCKSIZE=1k

# if [[ "$OSTYPE" == darwin* ]]; then
#   export BROWSER="/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary" # for pprof
# fi

export PROMPT_EOL_MARK='%' # zsh defaults

# }}}
# -----------------------------------------------------------------------------
# Build {{{

# ARFLAGS   - for ar achiver
# ARCHFLAGS - for arch config
# ASFLAGS   - for as assembler
# COFLAGS   - for co utility
# CPPFLAGS  - for C preprocessor
# CXXFLAGS  - for c++ compiler
# FFLAGS    - for Fortran compiler
# LFLAGS    - for lex
# PFLAGS    - for Pascal compiler
# YFLAGS    - for yacc

# export CC="$(xcrun -f clang)"
# export CXX="${CC}++"
export CC=clang
export CXX="${CC}++"
# export AR=llvm-ar
# export LD=lld
# export NM=llvm-nm
# for typical C bindings that assume to build both of x86_64 and i386,
# such as python library using libuv
# https://developer.apple.com/library/content/releasenotes/OpenSource/PerlExtensionsRelNotes/index.html#//apple_ref/doc/uid/TP40006659
export ARCHFLAGS='-arch x86_64'

# $MAKEFLAG no longer set. GNU-gcc documents said "no -j is added MAKEFLAGS".
# https://www.gnu.org/software/make/manual/html_node/Options_002fRecursion.html#Options_002fRecursion
export MAKEFLAGS='-j 8'

export CCACHE_CPP2=1
export CCACHE_HASHDIR=1
export CCACHE_SLOPPINESS=time_macros

# }}}
# -----------------------------------------------------------------------------

# macOS {{{

# Clang handling that macOS kernel version.
export MACOSX_DEPLOYMENT_TARGET=10.12

# nicm(tmux-dev) said, kqueue is broken on macOS.
# Might be it is effective other case such as Chromium.
# xref: https://github.com/tmux/tmux/issues/475#issuecomment-231527159
# export EVENT_NOKQUEUE=1

# }}}
# -----------------------------------------------------------------------------
# Languages {{{

# Go
export GOPATH="${HOME}/go"
export GOROOT_BOOTSTRAP="/usr/local/bootstrap/go1.7.3"


# Python
# It is strongly recommended that PYTHONHOME and PYTHONPATH be unset,
# as they can interfere with the Intel® Distribution for Python for OS X.
# export PYTHONSTARTUP="${XDG_CONFIG_HOME}/python/.pythonrc"
export PYTHONOPTIMIZE=1
# export PYTHONASYNCIODEBUG=1 # enable the debug mode of the asyncio module
# pyenv
if [ -n '/usr/local/var/pyenv' ]; then
  export PYENV_ROOT=/usr/local/var/pyenv
  export VIRTUAL_ENV_DISABLE_PROMPT=1
fi
# Jupyter
export JUPYTER_RUNTIME_DIR="${XDG_RUNTIME_DIR}/jupyter"
export JUPYTER_CONFIG_DIR="${XDG_CONFIG_HOME}/jupyter"
export JUPYTER_PATH="${XDG_DATA_HOME}/jupyter"
# IPython
export IPYTHONDIR="${XDG_CONFIG_HOME}/ipython"
# pip for Makefile
export PIP_FLAGS='--user'


# OCaml
eval `/usr/local/bin/opam config env` ## exec


# Ruby
export RBENV_ROOT="/usr/local/var/rbenv"


# Node
export NODEBREW_ROOT="/usr/local/var/nodebrew"
export NODE_REPL_HISTORY="${HOME}/.history/node/.node_repl_history"


# Java


# API token
source "$XDG_DATA_HOME/token/token"


# asciidoc (brew)
export XML_CATALOG_FILES="/usr/local/etc/xml/catalog"


# Adobe AFDKO
export FDK_EXE="/usr/local/opt/afdko/Tools/osx"


# borg
export BORG_REPO="/Volumes/WD20EZRX/borg"


# postgresql
export PGDATA="/usr/local/var/postgres"

# }}}
# -----------------------------------------------------------------------------
# Tools {{{

# Neovim:
export NVIM_TUI_ENABLE_CURSOR_SHAPE=1
export NVIM_LISTEN_ADDRESS='/tmp/nvim'
# export NVIM_CHILD_ARGV='["nvim", "-u", "NONE", "--embed"]'
export NVIM_VERBOSE_LOG_FILE="${XDG_LOG_HOME}/nvim/verbose.log"
# Logging for development plugins
export NVIM_GO_LOG_FILE="${XDG_LOG_HOME}/nvim/go/neovim-go.log"
export NVIM_GO_DEBUG=1
if [[ -d "${XDG_LOG_HOME}/nvim/go" ]]; then
  mkdir -p "${XDG_LOG_HOME}/nvim/go"
fi
if [[ -d "${XDG_LOG_HOME}/nvim/python" ]]; then
  mkdir -p "${XDG_LOG_HOME}/nvim/python"
fi

# If always export NVIM_PYTHON_LOG_FILE, nvim will be parse log file path
# export NVIM_PYTHON_LOG_FILE="${XDG_LOG_HOME}/nvim/python/python-client.log"
# export NVIM_PYTHON_LOG_LEVEL="DEBUG"
export NVIM_IPY_DEBUG_FILE="${XDG_LOG_HOME}/nvim/python/nvim-ipy.log"
export NVIM_DEOPLETE_LOG_FILE="${XDG_LOG_HOME}/nvim/python/deoplete.log"
export NVIM_DEOPLETE_JEDI_LOG_FILE="${XDG_LOG_HOME}/nvim/python/deoplete.log"
export NVIM_DEOGOTO_LOG_FILE="${HOME}/.local/var/log/nvim/python/deogoto.log"


# GDB:
export GDBHISTFILE="$HOME/.history/.gdb_history"


# cURL:
#  - Ref: https://gist.github.com/1stvamp/2158128#gistcomment-1573222
#  - Ref: https://github.com/smdahlen/vagrant-digitalocean/issues/123
export CURL_CA_BUNDLE="/usr/local/etc/ssl/certs/cert.pem"



# Docker:
# Machine
export MACHINE_DEBUG=1
export MACHINE_DRIVER_DEBUG=1
export MACHINE_DOCKER_INSTALL_URL="https://experimental.docker.com" # Always use experimental install
export MACHINE_NATIVE_SSH=1

# grep
export GREP_COLOR='30;43'           # BSD
export GREP_COLORS="mt=$GREP_COLOR" # GNU


# Less
# Set the default Less options.
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
# export LESS='-g -i -M -R -S -w -z -4 -X -F'
# export LESS=-asrRix8
export LESS='-gij.5MRsSXw'
export LESSOPEN='| src-hilite-lesspipe.sh %s'
# Set the Less input preprocessor.
# Try both `lesspipe` and `lesspipe.sh` as either might exist on a system.
if (( $#commands[(i)lesspipe(|.sh)] )); then
    export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"
fi


# google cloud sdk
# gcloud support only python2 when install gcloud
export CLOUDSDK_PYTHON="python2"


# nq
# TODO: Need more useful managing job tool written Go
export NQDIR=/tmp/nq
if [[ ! -d "$NQDIR" ]]; then
    mkdir "$NQDIR"
fi


# jtool, procexp
export JCOLOR=1


# Homebrew
export HOMEBREW_CACHE="${XDG_CACHE_HOME}/Homebrew"
export HOMEBREW_CASK_OPTS="--appdir=/Applications --caskroom=/Applications/Caskroom"
export HOMEBREW_DEBUG=1
export HOMEBREW_MAKE_JOBS=8
export HOMEBREW_NO_AUTO_UPDATE=1
export HOMEBREW_VERBOSE=1


# travis cli
export TRAVIS_CONFIG_PATH="${XDG_CONFIG_HOME}/travis"

# parallel
export PARALLEL="${XDG_CONFIG_HOME}/parallel"


# Misc:
export GROFF_NO_SGR=0
export gl_cv_func_getcwd_abort_bug="no" # build gnulib PATH_MAX bugs

# }}}
# -----------------------------------------------------------------------------
# Global Environment variables {{{
#

# typeset to (lower|upper)case environment variable
local -a _typeset
_typeset=(
  CPATH \
  INCLUDE \
  PKG_CONFIG_PATH \
  \
  DYLD_LIBRARY_PATH \
  LD_LIBRARY_PATH \
  LIBRARY_PATH \
)
# Specific directory path (PATH, FPATH, MANPATH, CDPATH) is set by default.
# No need -xT flag.
for type in $_typeset[@]; do
  typeset -xT ${type} ${type:l}
done
typeset -U path fpath manpath cdpath "$_typeset[@]:l"

path=(
  # dotfiles scripts
  ${HOME}/bin(N-/)
  # The Go language toolchain
  /usr/local/go/bin(N-/)
  ${GOPATH}/bin(N-/)
  # Intel® C++ compilers runtime
  /opt/intel/bin(N-/)
  # Intel® Distribution for Python2 and 3
  /opt/intel/intelpython{3,2}/bin(N-/)

  # Apple File System(apfs) command line tools
  /System/Library/Filesystems/apfs.fs/Contents/Resources(N-/)
  # NVIDIA CUDA Toolkit
  /Developer/NVIDIA/CUDA/bin(N-/)
  /usr/local/cuda/bin(N-/)
  # google cloud sdk
  ${HOME}/google-cloud-sdk/bin(N-/)
  # installed by pip, etc
  ${HOME}/.local/bin(N-/)
  # rust
  ${HOME}/.cargo/bin(N-/)
  # pyenv, rbenv, nodebrew, jenv
  # ${PYENV_ROOT}/{bin,shims}(N-/)
  ${RBENV_ROOT}/{bin,shims}(N-/)
  ${NODEBREW_ROOT}/current/bin(N-/)

  # brewed GNU {sed, coreutils} with default names
  /usr/local/opt/{gnu-sed,coreutils}/libexec/gnubin(N-/)
  # brewed git contrib diff-highlight script
  /usr/local/opt/git/share/git-core/contrib/diff-highlight(N-/)
  # Adobe Font Development Kit (afdko)
  /opt/adobe/afdko/Tools/osx(N-/)
  # nexosxbook(Author of Mac OS X and iOS Internals book) darwin utility
  ${HOME}/src/newosxbook.com/bin(N-/)
  # Xcode compiler toolchain
  ${XCODE_DIR}/Toolchains/XcodeDefault.xctoolchain/usr/bin(N-/)

  # Docker dev pre-compile binary
  /opt/docker/bin(N-/)

  # Linux filesystem default binary path
  /usr/local/{bin,sbin,libexec}(N-/)
  ${XCODE_DIR}/usr/bin(N-/)
  # Docker for Mac pre-compile binary
  /Applications/Docker.app/Contents/Resources/bin(N-/)
  # CERN root
  /opt/root/bin(N-/)
  # Oracle Java
  ${JAVA_HOME}/bin(N-/)
  # Linux filesystem default binary path
  /usr/{bin,sbin,libexec}(N-/)
  /{bin,sbin}(N-/)

  # DTraceToolkit
  ${HOME}/bin/dtt(N-/)

  # vmware fusion command line tools
  /opt/vmware/bin(N-/)
  ${path}
)

fpath=(
  ${HOME}/.zsh/functions(N-/)
  ${HOME}/.zsh/completions(N-/)
  ${HOME}/.zsh/completions/{zsh-completions,go,macOS}/src(N-/)
  /usr/local/opt/git/share/zsh/site-functions(N-/)
  ${ZSH_PLUGIN}/zsh-users/zsh-completions/src(N-/)
  ${ZSH_PLUGIN}/zsh-users/zsh-syntax-highlighting(N-/)
  ${fpath}
)

manpath=(
  /opt/intel/man/common(N-/)
  /opt/intel/man/gdb-ia(N-/)
  /usr/local/opt/coreutils/libexec/gnuman(N-/)
  /usr/local/share/man(N-/)
  ${XCODE_DIR}/Toolchains/XcodeDefault.xctoolchain/usr/share/man(N-/)
  ${XCODE_DIR}/usr/share/man(N-/)
  /usr/share/man(N-/)
  /usr/local/share/linux(N-/)
  /opt/root/man(N-/)
  # for ja_JP
  /usr/local/share/man/freebsd(N-/)
  ${manpath}
)

cdpath=(
  ${GOPATH}/src/{github.com,golang.org/x/,}(N-/)
  ${GOPATH}/src(N-/)
  ${HOME}/src/{github.com,opensource.apple.com}(N-/)
  ${cdpath}
)

cpath=(
  /usr/local/include(N-/)
  /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include(N-/)
  ${cpath}
)

include=(
  ${HOME}/.local/include(N-/)
  /opt/llvm/include(N-/)
  /opt/cern/root/include(N-/)
  /usr/local/cuda/include(N-/)
  /Library/Developer/Toolchains/swift-latest.xctoolchain/usr/include(N-/)
  /usr/local/include(N-/)
  ${MACOS_SDK_DIR}/usr/include(N-/)
  ${HOME}/src/newosxbook.com/include(N-/)
  /usr/include(N-/)
  ${include}
)

pkg_config_path=(
  /usr/local/lib/pkgconfig
  /usr/lib/pkgconfig
  ${pkg_config_path}
)

dyld_library_path=(
  /Developer/NVIDIA/CUDA/lib(N-/)
  ${dyld_library_path}
)

ld_library_path=(
  /opt/intel/lib(N-/)
  /opt/intel/intelpython{3,2}/lib(N-/)
  /opt/llvm/lib(N-/)
  /opt/cern/root/lib(N-/)
  /usr/local/cuda/lib(N-/)
  /Library/Developer/Toolchains/swift-latest.xctoolchain/usr/lib(N-/)
  /usr/local/lib(N-/)
  ${MACOS_SDK_DIR}/usr/lib(N-/)
  /usr/lib(N-/)
  ${ld_library_path}
)

library_path=(
  ${library_path}
)

# Evaluate system PATH
if [ -x /usr/libexec/path_helper ]; then
  eval `/usr/libexec/path_helper -s` ## exec
fi

# }}}
# -----------------------------------------------------------------------------

if [[ -n ${ZSH_DEBUG} ]]; then; echo 'Finished zshenv'; fi
